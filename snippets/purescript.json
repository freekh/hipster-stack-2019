{
  "Import": {
    "prefix": "import",
    "body": [
      "import Affjax (post)",
      "import Affjax.RequestBody (RequestBody(..))",
      "import Affjax.ResponseFormat (json)",
      "import Data.Argonaut.Core (jsonEmptyObject)",
      "import Data.Argonaut.Decode (class DecodeJson, decodeJson, (.:))",
      "import Data.Argonaut.Decode.Generic.Rep (decodeLiteralSumWithTransform)",
      "import Data.Argonaut.Encode (class EncodeJson, encodeJson, (:=), (~>))",
      "import Data.Argonaut.Encode.Generic.Rep (encodeLiteralSumWithTransform)",
      "import Data.Array (foldl, length, (..))",
      "import Data.Either (Either(..), either)",
      "import Data.FoldableWithIndex (traverseWithIndex_)",
      "import Data.Generic.Rep (class Generic)",
      "import Data.Generic.Rep.Show (genericShow)",
      "import Data.Int (toNumber)",
      "import Data.Maybe (Maybe(..))",
      "import Effect (Effect)",
      "import Effect.Aff (Aff, Milliseconds(..), delay, error, runAff_, throwError)",
      "import Effect.Class (liftEffect)",
      "import Effect.Exception (throwException)",
      "import Graphics.Canvas (CanvasImageSource, Context2D, Dimensions, clearRect, drawImageScale, fillRect, getCanvasDimensions, getCanvasElementById, getContext2D, tryLoadImage)",
      "import Record (merge)",
    ]
  },
  "State": {
    "prefix": "state",
    "body": [
      "",
      "data Direction = North | West | South | East",
      "",
      "type Pos = { x :: Int, y :: Int }",
      "",
      "newtype State = State",
      "  { pos :: Pos",
      "  , dir :: Direction",
      "  , matrix :: Array (Array Boolean)",
      "  }",
      "",
    ]
  },
  "Init": {
    "prefix": "init",
    "body": [
      "init :: State",
      "init =",
      "  State { pos: { x: 6, y: 6 }, dir: West, matrix }",
      "  where",
      "    matrix :: Array (Array Boolean)",
      "    matrix = $0",
    ]
  },
	"Derive": {
    "prefix": "derive",
    "body": [
      "derive instance genericDirection :: Generic Direction _",
      "instance showDirection:: Show Direction where",
      "  show a = genericShow a",
      "instance encodeJsonDirection :: EncodeJson Direction where",
      "  encodeJson a = encodeLiteralSumWithTransform identity a",
      "instance decodeJsonDirection :: DecodeJson Direction where",
      "  decodeJson a = decodeLiteralSumWithTransform identity a",
      "instance showState:: Show State where",
      "  show (State a) = show a",
      "instance encodeJsonState :: EncodeJson State where",
      "  encodeJson (State s) = do",
      "    \"pos\" := s.pos ",
      "      ~> \"dir\" := s.dir",
      "      ~> \"matrix\" := s.matrix",
      "      ~> jsonEmptyObject",
      "instance decodeJsonState :: DecodeJson State where",
      "  decodeJson json = do",
      "    v <- decodeJson json",
      "    pos <- v .: \"pos\"",
      "    x <- pos .: \"x\"",
      "    y <- pos .: \"y\"",
      "    dir <- v .: \"dir\"",
      "    matrix <- v .: \"matrix\"",
      "    pure $ State { pos: { x, y }, dir, matrix }",
      "$0",
    ]
  },
  "Run": {
    "prefix": "run",
    "body": [
      "",
      "run :: forall x. Aff x -> Effect Unit",
      "run = runAff_ (either throwException $ const (pure unit))",
      "$0",
    ]
  },
  "Render": {
    "prefix": "render",
    "body": [
      "render :: Context2D -> Dimensions -> CanvasImageSource -> State -> Aff Unit",
      "render ctx dims antImg (StateÂ { pos: { x, y }, dir, matrix: rows }) = liftEffect $ do",
      "  clearRect ctx { x: 0.0, y: 0.0, height: dims.height, width: dims.width }",
      "  $0",
      "  where",
      "    renderRow :: Int -> Array Boolean -> Effect Unit",
      "    renderRow row cols = throwError $ error \"TODO\"",
      "",
      "    renderCell :: Int -> Int -> Boolean  -> Effect Unit",
      "    renderCell row col cell = ",
      "      throwError $ error \"TODO\"",
      "      where pos = { x: toNumber col * cellDims.width",
      "                  , y: toNumber row * cellDims.height",
      "                  }",
      "",
      "    renderAnt :: Effect Unit",
      "    renderAnt =",
      "      drawImageScale ctx antImg",
      "        (toNumber x * cellDims.width)",
      "        (toNumber y * cellDims.height)",
      "        cellDims.width",
      "        cellDims.height",
      "",
      "    cellDims = { width: dims.width / (toNumber $ length rows)",
      "               , height: dims.height / colsLength",
      "               }",
      "",
      "    colsLength :: Number",
      "    colsLength = foldl (flip $ max <<< toNumber <<< length) 0.0 rows",
      "",
      "main :: Effect Unit",
      "main = do",
      "  maybeElem <- getCanvasElementById \"$1\"",
      "  case maybeElem of",
      "    Just elem -> do",
      "      ctx <- getContext2D elem",
      "      dims <- getCanvasDimensions elem",
      "      tryLoadImage \"$2\" $ start ctx dims init",
      "    Nothing -> throwError $ error \"SHit major tissue!! No canvas?\"",
      "  where",
      "    start :: Context2D -> Dimensions -> State -> Maybe CanvasImageSource -> Effect Unit",
      "    start ctx dims state (Just antImg) = run $ loop ctx dims state antImg",
      "    start _ _ _ _ = throwError $ error \"Goad damn it! No Image?!\"",
      "",
    ]
  }
}